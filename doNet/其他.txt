编程技巧：
	尽量避免任何层的同步调用
	尽量使用异步编程（async、await）
	使用异步编程避免TASK.WAIT或TAST.RESULT
	尽量异步执行I/O操作
	尽量使用缓存
	优化数据访问






===========================待学习要点======================================
基于Node.js的puppeteer,edge爬虫工具
Docker容器引擎
MVVM开发模式
AngelaJS		 requirejs
webassemly技术革命
dapper数据库操作
nginx技术
MongoDB数据库

高并发高性能，熟悉rabbitmq，redis，熟悉jvm这一类就好多

待学习：
	ConcurrentDictionary键值对
大石头：19年，redis/rockermq/agent 的增长速度最快，可以想象，大家热衷于大数据、中间件、中台。
rocketmq和redis去别，
		
		
================================编程技巧=======================================		
//List某列转换成逗号连接字符串
string strPawnInfo = data.PawnInfoList.Aggregate(((i, j) => new PawnInfoModel { Boo = i.Boo + delimiter + j.Boo }).Boo);
string.Join(",", data.PawnInfoList.Select(c => c.PawnAddress));		

TheadPool.QueueUserItem //不推荐使用，容易阻塞线程




//登录成功配置登录cookie
FormsAuthentication.SetAuthCookie
//获取方式
User.Identity.Name

		
=============================数据库技巧====================================
stuff  for xml path ('')
 





=============================前端=========================================
判断某个元素在数组中的位置
	var arr = [ "xml", "html", "css", "js" ]; 
	$.inArray("js", arr);  //返回 3,
删除数组中的某个元素
	arr.splice(0,1);
判断数组是否为null
	if (array === undefined || array.length == 0)
JQuery遍历each
	$(selector).each(function(index,element))
	
	
	
$("[name='delete']").off("click"); //如果该对象存在其他click事件先解绑事件
$("[name='download']").one("click", function () {只绑定一次事件
$.inArray(val, Attachments)//判断值是否在数组中，并返回位置


import Storage from './Storage'    当前目录
import {Const} from '../Const/Index'	上一层




获取当前content：getReactApplicationContext()




=============================ES6=======================================
indexOf	
includes()：返回布尔值，表示是否找到了参数字符串
startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部
endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部
repeat()，表示将原字符串重复n次
padStart()，padEnd()字符串补全长度
matchAll()
模板字符串中嵌入变量，需要将变量名写在${}之中
Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity. Number.isFinite()对于非数值一律返回false
Number.isNaN()用来检查一个值是否为NaN


=============================待整理=======================================
输出html片段：
	@Html.Partial("~/Views/Shared/Pager.cshtml")
	@{Html.RenderPartial("Pager");}

	

===========================EF示例代码==============================
//综合（封装过）
IDAL.IDBSession dbSession = DBSessionFactory.CreateDbSession();
dbSession.ProductSkuAttributeDal.AddEntity(skuAttr);//增删改查都可以

//综合二（直接操作数据库）
using (var db = new LI63O2OEntities())
{
   db.N_LYZB_ProductSkuAttribute.Where(t => proskuids.Contains(t.MID_guid)).ToList();//新增
   db.SaveChanges();//查出来、修改
	//事务
	using (var tran = new TransactionScope())
	{
	 db.SaveChanges();
	 tran.Complete();
	}
}
//通过每一个Service来处理


//查询
skuAttrValueService.LoadEntities(t => gValueIds.Contains(t.MID_guid)); 



MemberCompanyService 
//更新数据方式
public bool AddSale(N_GroupCommodity GroupCommodity)
{
	 Db.Set<N_GroupCommodity>().Attach(GroupCommodity);
	 Db.Entry<N_GroupCommodity>(GroupCommodity).Property(t => t.CurrentGroupSales_decimal).IsModified = true;
	 return true;
}
//最简单新增改查
MemberService类
public override void SetCurretnDal()
{
	  CurrentDal = this.GetCurrentDbSession.MemberDal;
}

//Entity执行sql
this.GetCurrentDbSession.ExecuteSql(sql, sqlParam)
os.Database.SqlQuery<OrderTrackModel>(sql, paramarter.ToArray())





